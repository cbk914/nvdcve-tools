# Author: cbk914
import requests
import re
import sys
import argparse
import logging
import os

logging.basicConfig(filename="nvdcve.log", level=logging.DEBUG, format="%(asctime)s: %(message)s")


# Parse the command line arguments
parser = argparse.ArgumentParser()
parser.add_argument("-y", "--year", type=int, help="Download data for specific year (yyyy)")
args = parser.parse_args()

# Verify SSL certificate for secure connection
r = requests.get('https://nvd.nist.gov/vuln/data-feeds#JSON_FEED', verify=True)

if not os.path.exists("nvd"):
    os.makedirs("nvd")

for filename in re.findall("nvdcve-1.1-[0-9]*\.json\.zip",r.text):
    # Check if year is specified and continue to next iteration if the year is not in filename
    if args.year:
        if str(args.year) not in filename:
            continue
    
    # Use session to persist the connection and reuse it
    with requests.Session() as session:
        session.mount('https://', requests.adapters.HTTPAdapter(max_retries=3))
        r_file = session.get("https://static.nvd.nist.gov/feeds/json/cve/1.1/" + filename, stream=True)
        # Raise an error in case of unsuccessful response status
        r_file.raise_for_status()
        
        # Check if file already exists and compare sha256
        file_path = "nvd/" + filename
        if os.path.exists(file_path):
            with open(file_path, 'rb') as f:
                    continue
        
        with open("nvd/" + filename, 'wb') as f:
            for chunk in r_file.iter_content(chunk_size=8192):
                # write the content to the file in chunks to avoid memory exhaustion
                f.write(chunk)
                downloaded = f.tell()
                print("Downloaded %.2f%% of %s" % (downloaded / int(r_file.headers['Content-Length']) * 100, filename))
                
with open("nvdcve.log", "a") as logfile:
    logfile.write("Downloaded %s\n" % filename)

# Show summary of downloaded files
print("Summary:")
print("Filename\tSize")
for filename in os.listdir("nvd"):
    file_path = "nvd/" + filename
    file_size = os.path.getsize(file_path)
    with open(file_path, 'rb') as f:
        print("%s\t%d\t%s" % (filename, file_size))
