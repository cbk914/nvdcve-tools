# Author: cbk914
import requests
import re
import sys
import argparse
import logging
import os
import hashlib
import zipfile

# Configure logging
logging.basicConfig(filename="nvdcve.log", level=logging.DEBUG, format="%(asctime)s: %(message)s")

title = "GET-NVDCVE"
print("=" * (len(title) + 4))
print("| " + title + " |")
print("=" * (len(title) + 4))

# Parse the command line arguments
parser = argparse.ArgumentParser()
parser.add_argument("-y", "--year", type=int, help="Download data for specific year (yyyy)")
args = parser.parse_args()

def fetch_page(url):
    try:
        response = requests.get(url, verify=True)
        response.raise_for_status()
        return response.text
    except requests.exceptions.RequestException as e:
        logging.error("An error occurred while connecting to the server: %s", e)
        sys.exit(1)

def download_file(session, url, file_path):
    try:
        response = session.get(url, stream=True)
        response.raise_for_status()
        with open(file_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
                downloaded = f.tell()
                print("Downloaded %.2f%% of %s" % (downloaded / int(response.headers['Content-Length']) * 100, os.path.basename(file_path)))
        return response.headers.get("X-Content-SHA256")
    except requests.exceptions.RequestException as e:
        logging.error("An error occurred while downloading the file: %s", e)
        return None

def verify_and_extract(filename, sha256_header):
    file_path = f"nvd/{filename}"
    if os.path.exists(file_path):
        with open(file_path, 'rb') as f:
            current_sha256 = hashlib.sha256(f.read()).hexdigest()
        if current_sha256 == sha256_header:
            logging.info("%s already downloaded and verified.", filename)
            return False
    return True

def extract_zip(file_path, extract_to):
    try:
        with zipfile.ZipFile(file_path, "r") as zip_ref:
            zip_ref.extractall(extract_to)
        logging.info("Extracted %s to %s", file_path, extract_to)
    except zipfile.BadZipFile as e:
        logging.error("Failed to extract %s: %s", file_path, e)

def log_download(filename):
    try:
        with open("nvdcve.log", "a") as logfile:
            logfile.write("Downloaded %s\n" % filename)
    except PermissionError as e:
        logging.error("PermissionError: %s", e)
        print("PermissionError: %s" % e)

def show_summary(directory):
    try:
        print("-" * 120)
        print("Summary:".rjust(70))
        print("-" * 120)
        print("Filename".ljust(30), "Size".rjust(20), "sha256".rjust(50))
        print("-" * 120)
        with open("hashes.txt", 'w') as f_out:
            for filename in os.listdir(directory):
                file_path = os.path.join(directory, filename)
                file_size = os.path.getsize(file_path)
                with open(file_path, 'rb') as f:
                    sha256 = hashlib.sha256(f.read()).hexdigest()
                    print(filename.ljust(30), str(file_size).rjust(20), sha256.rjust(50))
                    f_out.write("%s\t%d\t%s\n" % (filename, file_size, sha256))
        print("-" * 120)
    except FileNotFoundError as e:
        logging.error("Error: %s", e)
        print(f"Error: {e}")
    except Exception as e:
        logging.error("Error: %s", e)
        print(f"Error: {e}")

def main():
    if not os.path.exists("nvd"):
        os.makedirs("nvd")

    page_content = fetch_page('https://nvd.nist.gov/vuln/data-feeds#JSON_FEED')
    for filename in re.findall(r"nvdcve-1.1-[0-9]*\.json\.zip", page_content):
        if args.year and str(args.year) not in filename:
            continue
        
        with requests.Session() as session:
            session.mount('https://', requests.adapters.HTTPAdapter(max_retries=3))
            file_url = f"https://static.nvd.nist.gov/feeds/json/cve/1.1/{filename}"
            file_path = f"nvd/{filename}"
            
            sha256_header = download_file(session, file_url, file_path)
            if sha256_header and verify_and_extract(filename, sha256_header):
                extract_zip(file_path, "nvd")
                log_download(filename)
    
    show_summary("nvd")

if __name__ == "__main__":
    main()
